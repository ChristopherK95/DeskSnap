import { createServer, IncomingMessage } from 'http';
import { Server, Socket} from 'socket.io';
import express, { Express, NextFunction, Request, Response } from 'express';
import session, {Session, SessionData} from 'express-session';
import { Schema } from 'mongoose';

type User = {
  id: Schema.Types.ObjectId;
  username: string;
  password: string;
};

declare module "http" {
  interface IncomingMessage {
    session: Session & {
      user: User,
      isLoggedIn: boolean,
    }
  }
}
//interface SessionIncomingMessage extends IncomingMessage {
//  session: SessionData
//};

//interface SessionSocket extends Socket {
//  request: SessionIncomingMessage
//};

export const sockets = (
  app: Express,
  sessionMiddleware: ReturnType<typeof session> 
) => { 
  const httpServer = createServer(app);
  const io = new Server(httpServer, {
    cors: {
      origin: ['http://localhost:1420', 'http://127.0.0.1:1420'],
      methods: ['POST', 'GET', 'OPTIONS', 'HEAD'],
      credentials: true,
    }
  });

  const wrap = (expressMiddleware: any) => (socket: Socket, next: any) => expressMiddleware(socket.request, {}, next);
  io.use(wrap(sessionMiddleware));
  //io.use((socket, next) => {
  //  sessionMiddleware(socket.request as Request, {} as Response, next as NextFunction);
  //});
  //io.engine.use(wrapper(sessionMiddleware));

  io.on('connection', (socket) => {
    console.log('a user connected\n', io.sockets);
    socket.on('send-invite', (users: string[]) => {
      console.log(socket);
      socket.to(users).emit('receive-invite');
    });
  });

  httpServer.listen(3000);
}  
